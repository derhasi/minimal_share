<?php

/**
 * @file
 * Main file of Minimal Share module.
 */

/**
 * Implements hook_menu().
 */
function minimal_share_menu() {
  $items = array();

  $items['admin/config/user-interface/minimal-share'] = array(
    'type' => MENU_NORMAL_ITEM,
    'title' => 'Minimal Share',
    'description' => 'Configure appearance of sharing links.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('minimal_share_config_form'),
    'access arguments' => array('administer minimal share'),
    'file' => 'minimal_share.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function minimal_share_permission() {
  return array(
    'administer minimal share' => array(
      'title' => t('Administer Minimal Share'),
      'description' => t('Set global settings for Minimal Share.'),
    ),
  );
}

/**
 * Implements hook_help().
 */
function minimal_share_help($path, $arg) {
  if ($path == 'admin/config/user-interface/minimal-share') {
    return '<p>' . t('Enable desired services and select the label. Do not getting confused by the different numbers they are just for demonstrating a count.') . '</p>';
  }
}

/**
 * Implements hook_field_extra_fields().
 */
function minimal_share_field_extra_fields() {
  $extra = array();
  $entity_info = entity_get_info();

  foreach ($entity_info['node']['bundles'] as $bundle => $fields) {
    $extra['node'][$bundle]['display']['minimal_share'] = array(
      'label' => t('Minimal Share'),
      'weight' => 10,
    );
  }

  return $extra;
}

/**
 * Implements hook_entity_view().
 */
function minimal_share_entity_view($entity, $type, $view_mode, $langcode) {
  list(, , $bundle) = entity_extract_ids($type, $entity);
  $extra_fields = field_extra_fields_get_display($type, $bundle, $view_mode);

  if (isset($extra_fields['minimal_share']) && $extra_fields['minimal_share']['visible']) {
    $entity->content['minimal_share'] = minimal_share_field($type, $entity);
  }
}

/**
 * Extra field callback.
 */
function minimal_share_field($entity_type, $entity) {
  // Get all available service information.
  $settings = minimal_share_settings();

  $uri = entity_uri($entity_type, $entity);
  $url = drupal_encode_path(url($uri['path'], array('absolute' => TRUE)));
  $title = drupal_encode_path(entity_label($entity_type, $entity));

  $element = array(
    '#type' => 'html_tag',
    '#tag' => 'p',
    '#attributes' => array('class' => array('minimal-share')),
    '#value' => '',
    '#attached' => array(
      'css' => array(
        drupal_get_path('module', 'minimal_share') . '/css/minimal-share.css',
      ),
      'js' => array(
        drupal_get_path('module', 'minimal_share') . '/js/minimal-share.js',
      ),
    ),
  );

  foreach ($settings['services'] as $service_name => $service) {
    if (!$service['enabled']) {
      continue;
    }

    $service['link'] = str_replace(array('[title]', '[url]'), array($title, $url), $service['link']);

    // Set default label type.
    if (!isset($service['label_type'])) {
      $service['label_type'] = 'name';
    }

    // Load count only if necessary.
    if ($service['label_type'] == 'name_count' || $service['label_type'] == 'custom' && strpos($service['custom'], '[count]') !== FALSE) {
      $count = minimal_share_count($service_name, $url);
    }

    switch ($service['label_type']) {
      case 'name':
        $service['label'] = $service['title'];
        break;
      case 'icon':
        $service['label'] = '';
        $element['#attached']['css'][] = drupal_get_path('module', 'minimal_share') . '/css/minimal-share-icons.css';
        break;

      case 'name_count':
        $service['label'] = '<span class="title">' . $service['title'] . '</span>';

        if ($count || !$count && !$service['hide_zero']) {
          $service['label'] .= ' <span class="count">(' . $count . ')</span>';
        }
        break;

      case 'custom':
        // Replace [count] token with real count.
        if (minimal_share_count_callback_exists($service) && strpos($service['custom'], '[count]') !== FALSE) {
          $service['custom'] = str_replace('[count]', $count, $service['custom']);
        }

        $service['label'] = check_plain($service['custom']);
        break;
    }

    $link_options = array(
      'html' => TRUE,
      'external' => TRUE,
      'attributes' => array(
        'class' => array($service_name),
      ),
    );

    if ($service['label_type'] == 'icon') {
      $link_options['attributes']['class'][] = 'icon';
    }

    // Add data attributes for size.
    foreach (array('width', 'height') as $property) {
      if (isset($service['size'][$property])) {
        $link_options['attributes']['data-' . $property] = $service['size'][$property];
      }
    }

    $element['#value'] .= l($service['label'], $service['link'], $link_options);
  }

  return $element;
}

/**
 * Service definitions.
 *
 * @return array
 *   An array with all service definitions.
 */
function minimal_share_services() {
  $services = array();

  foreach (module_implements('minimal_share_services') as $module) {
    $services += module_invoke($module, 'minimal_share_services');
  }

  drupal_alter('minimal_share_services', $services);

  return $services;
}

/**
 * Implements hook_minimal_share_services().
 */
function minimal_share_minimal_share_services() {
  $services = array(
    'facebook' => array(
      'title' => t('Facebook'),
      'link' => 'https://www.facebook.com/sharer.php?u=[url]&t=[title]',
      'size' => array('width' => '600', 'height' => '500'),
      'icon' => TRUE,
      'count_callback' => 'minimal_share_facebook_count',
    ),
    'twitter' => array(
      'title' => t('Twitter'),
      'link' => 'http://twitter.com/home?status=[title]%20-%20[url]',
      'size' => array('width' => '600', 'height' => '260'),
      'icon' => TRUE,
      'count_callback' => 'minimal_share_twitter_count',
    ),
    'gplus' => array(
      'title' => t('Google+'),
      'link' => 'https://plus.google.com/share?url=[url]',
      'size' => array('width' => '600', 'height' => '400'),
      'icon' => TRUE,
      'count_callback' => 'minimal_share_gplus_count',
    ),
    'linkedin' => array(
      'enabled' => FALSE,
      'title' => t('LinkedIn'),
      'link' => 'http://www.linkedin.com/shareArticle?mini=true&url=[url]&title[title]',
      'size' => array('width' => '520', 'height' => '570'),
      'icon' => TRUE,
      'count_callback' => 'minimal_share_linkedin_count',
    ),
    'pinterest' => array(
      'enabled' => FALSE,
      'title' => t('Pinterest'),
      'link' => 'http://pinterest.com/pin/create/button/?url=[url]&description=[title]',
      'size' => array('width' => '1000', 'height' => '600'),
      'icon' => TRUE,
    ),
    'tumblr' => array(
      'enabled' => FALSE,
      'title' => t('Tumblr'),
      'link' => 'https://www.tumblr.com/share/link?url=[url]&name=[title]',
      'size' => array('width' => '455', 'height' => '455'),
      'icon' => TRUE,
    ),
    'email' => array(
      'enabled' => FALSE,
      'title' => t('Email'),
      'link' => 'mailto:?subject=[title]&body=[url]',
      'icon' => TRUE,
    ),
    'print' => array(
      'enabled' => FALSE,
      'title' => t('Print'),
      'link' => '',
      'icon' => TRUE,
    ),
  );

  return $services;
}

/**
 * Get Minimal Share settings.
 *
 * @return array
 *   Contains settings.
 */
function minimal_share_settings() {
  $settings = variable_get('minimal_share', array());
  $service_settings = isset($settings['services']) ? $settings['services'] : array();
  $settings['services'] = array_merge_recursive(minimal_share_services(), $service_settings);

  foreach ($settings['services'] as $key => &$service) {
    if (!isset($service['weight'])) {
      $service['weight'] = $key;
    }

    if (isset($service['enabled'])) {
      if (is_array($service['enabled'])) {
        $service['enabled'] = $service['enabled'][1];
      }
    }
    else {
      $service['enabled'] = TRUE;
    }
  }

  uasort($settings['services'], 'minimal_share_sort_by_weight');
  uasort($settings['services'], 'minimal_share_sort_by_enabled');

  return $settings;
}

/**
 * Sorting by weight function.
 */
function minimal_share_sort_by_weight($a, $b) {
  return strcmp($a['weight'], $b['weight']);
}

/**
 * Sorting by enabled function.
 */
function minimal_share_sort_by_enabled($a, $b) {
  return strcmp($b['enabled'], $a['enabled']);
}

/**
 * Load count for a URL.
 *
 * @param string $service_name
 *   The service you want to request.
 * @param string $url
 *   The specific URL.
 *
 * @return int
 *   The amount of shares.
 */
function minimal_share_count($service_name, $url) {
  $settings = variable_get('minimal_share', array());
  $services = minimal_share_services();
  $service = $services[$service_name];
  $cid = 'minimal_share:' . md5($service_name . $url);
  $data = &drupal_static(__FUNCTION__);

  if (!isset($data[$cid])) {
    $cache_lifetime = isset($settings['general']['cache_lifetime']) ? $settings['general']['cache_lifetime'] : 900;

    if ($cache_lifetime) {
      if ($cache = cache_get($cid)) {
        $data[$cid] = $cache->data;
      }
      else {
        $data[$cid] = minimal_share_count_callback($service, $url);

        cache_set($cid, (int) $data[$cid], 'cache', time() + $cache_lifetime);
      }
    }
    else {
      $data[$cid] = minimal_share_count_callback($service, $url);
    }
  }

  if ($data[$cid] > 999 && $data[$cid] <= 999999) {
    $data[$cid] = floor($data[$cid] / 1000) . 'k';
  } elseif ($data[$cid] > 999999) {
    $data[$cid] = floor($data[$cid] / 1000000) . 'm';
  }

  return $data[$cid];
}

/**
 * Check whether count callback is defined and exists.
 *
 * @param array $service
 *   Contains service settings.
 *
 * @return bool
 *   Whether count callback exists and is valid or not.
 */
function minimal_share_count_callback_exists($service) {
  return isset($service['count_callback']) && function_exists($service['count_callback']) ? TRUE : FALSE;
}

/**
 * Call count callback for a specific service.
 *
 * @param array $service
 *   Contains service settings.
 * @param string $url
 *   The requested URL.
 *
 * @return int
 *   The amount of shares.
 */
function minimal_share_count_callback($service, $url) {
  return isset($service['count_callback']) && function_exists($service['count_callback']) ? call_user_func_array($service['count_callback'], array($url)) : 0;
}

/**
 * Count callback for Facebook.
 *
 * @param string $url
 *   The requested URL.
 *
 * @return int
 *   The amount of shares.
 */
function minimal_share_facebook_count($url) {
  $count = 0;
  $request = drupal_http_request('http://graph.facebook.com/?id=' . $url);

  if (!isset($request->data)) {
    return $count;
  }

  $data = json_decode($request->data);
  $count = isset($data->shares) ? $data->shares : $count;

  return $count;
}

/**
 * Count callback for Twitter.
 *
 * @param string $url
 *   The requested URL.
 *
 * @return int
 *   The amount of shares.
 */
function minimal_share_twitter_count($url) {
  $count = 0;
  $request = drupal_http_request('http://cdn.api.twitter.com/1/urls/count.json?url=' . $url);

  if (!isset($request->data)) {
    return $count;
  }

  $data = drupal_json_decode($request->data);
  $count = isset($data['count']) ? $data['count'] : 0;

  return $count;
}

/**
 * Count callback for Google+.
 *
 * @param string $url
 *   The requested URL.
 *
 * @return int
 *   The amount of shares.
 */
function minimal_share_gplus_count($url) {
  $count = 0;
  $request = drupal_http_request('https://clients6.google.com/rpc', array('method' => 'POST', 'data' => '[{"method":"pos.plusones.get","id":"p","params":{"nolog":true,"id":"' . $url . '","source":"widget","userId":"@viewer","groupId":"@self"},"jsonrpc":"2.0","key":"p","apiVersion":"v1"}]'));

  if (!isset($request->data)) {
    return $count;
  }

  $data = drupal_json_decode($request->data);
  $count = isset($data[0]['result']['metadata']['globalCounts']['count']) ? $data[0]['result']['metadata']['globalCounts']['count'] : 0;

  return $count;
}

/**
 * Count callback for LinkedIn.
 *
 * @param string $url
 *   The requested URL.
 *
 * @return int
 *   The amount of shares.
 */
function minimal_share_linkedin_count($url) {
  $count = 0;
  $request = drupal_http_request('http://www.linkedin.com/countserv/count/share?url=' . $url . '&format=json');

  if (!isset($request->data)) {
    return $count;
  }

  $data = drupal_json_decode($request->data);
  $count = $data['count'];

  return $count;
}
